# ===================================================================
# Slimmelezer Template (ESP8266 / Home Assistant API)
#
# A complete, feature-enabled, and optimized configuration for
# the Slimmelezer hardware.
#
# INSTRUCTIONS:
# 1. Update the `substitutions` block below with your desired device names.
# 2. Ensure you have configured all required secrets in your secrets.yaml file.
#    Required secrets: wifi_ssid, wifi_password, fallback_ap_password,
#                      dsmr_key, ota_password, api_key.
# ===================================================================

substitutions:
  device_name: slimmelezer
  friendly_name: "Slimmelezer"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  project:
    name: esphome.slimmelezer
    version: "2.0" 
    
esp8266:
  board: d1_mini

# --- Core System Components ---

# Home Assistant Native API
api:
  encryption:
    key: !secret api_key
  # Allows setting the DSMR decryption key from a Home Assistant service call
  services:
    - service: set_dsmr_key
      variables:
        private_key: string
      then:
        - logger.log:
            format: Setting private key %s. Set to empty string to disable
            args: [private_key.c_str()]
        - globals.set:
            id: has_key
            value: !lambda "return private_key.length() == 32;"
        - lambda: |-
            if (private_key.length() == 32)
              private_key.copy(id(stored_decryption_key), 32);
            id(dsmr_instance).set_decryption_key(private_key);

# Over-The-Air Updates
ota:
  password: !secret ota_password

# Safe Mode to recover from bad updates
safe_mode:
  reboot_timeout: 10min

# Logging
logger:
  level: INFO

# WiFi with Fallback Access Point
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret fallback_ap_password

# Required for the fallback AP to provide a configuration page
captive_portal:

# --- Hardware & Time Configuration (Slimmelezer Specific) ---

uart:
    id: uart_bus
    rx_pin:
      number: D7
      inverted: false
    baud_rate: 115200
    rx_buffer_size: 2048

dsmr:
  id: dsmr_instance
  decryption_key: !secret dsmr_key
  request_pin: D5 # Specific to Slimmelezer hardware
  max_telegram_length: 1800
  gas_mbus_id: 1
  water_mbus_id: 2

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"
    servers:
      - "lu.pool.ntp.org"
      - "pool.ntp.org"

# --- Device Logic & Features ---

globals:
  - id: has_key
    type: bool
    restore_value: yes
    initial_value: "false"
  - id: stored_decryption_key
    type: char[32]
    restore_value: yes
  - id: energy_consumption_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: water_consumption_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: energy_production_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: gas_consumption_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_3kw_day_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_7kw_day_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_12kw_day_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_3kw_month_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_7kw_month_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_12kw_month_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: buffer_index
    type: int
    initial_value: "0"
  - id: buffer_full
    type: bool
    initial_value: "false"
  - id: power_consumption_buffer
    type: float[90]

sensor:
  # Standard DSMR sensors
  - platform: dsmr
    energy_delivered_lux:
      name: "${friendly_name} Energy Consumed"
      id: energy_consumed_lux
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_delivered_tariff1:
      name: "${friendly_name} Energy Consumed T1"
      id: energy_consumed_t1
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_delivered_tariff2:
      name: "${friendly_name} Energy Consumed T2"
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_returned_lux:
      name: "${friendly_name} Energy Produced"
      id: energy_produced_lux
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_returned_tariff1:
      name: "${friendly_name} Energy Produced T1"
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_returned_tariff2:
      name: "${friendly_name} Energy Produced T2"
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    power_delivered:
      name: "${friendly_name} Power Consumed"
      id: power_consumed
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned:
      name: "${friendly_name} Power Produced"
      id: power_produced
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    electricity_failures:
      name: "${friendly_name} Electricity Failures"
      icon: mdi:alert
      state_class: total_increasing
    electricity_long_failures:
      name: "${friendly_name} Long Electricity Failures"
      icon: mdi:alert
      state_class: total_increasing
    voltage_l1:
      name: "${friendly_name} Voltage L1"
      device_class: voltage
      state_class: measurement
      filters:
        - throttle: 10s
    voltage_l2:
      name: "${friendly_name} Voltage L2"
      device_class: voltage
      state_class: measurement
      filters:
        - throttle: 10s
    voltage_l3:
      name: "${friendly_name} Voltage L3"
      device_class: voltage
      state_class: measurement
      filters:
        - throttle: 10s
    current_l1:
      name: "${friendly_name} Current L1"
      device_class: current
      state_class: measurement
      filters:
        - throttle: 10s
    current_l2:
      name: "${friendly_name} Current L2"
      device_class: current
      state_class: measurement
      filters:
        - throttle: 10s
    current_l3:
      name: "${friendly_name} Current L3"
      device_class: current
      state_class: measurement
      filters:
        - throttle: 10s
    power_delivered_l1:
      name: "${friendly_name} Power Consumed L1"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_delivered_l2:
      name: "${friendly_name} Power Consumed L2"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_delivered_l3:
      name: "${friendly_name} Power Consumed L3"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned_l1:
      name: "${friendly_name} Power Produced L1"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned_l2:
      name: "${friendly_name} Power Produced L2"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned_l3:
      name: "${friendly_name} Power Produced L3"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    gas_delivered:
      name: "${friendly_name} Gas Consumed"
      id: gas_consumed
      state_class: total_increasing
      device_class: gas
      filters:
        - throttle: 300s
    water_delivered:
      name: "${friendly_name} Water Consumed"
      id: water_consumed
      state_class: total_increasing
      device_class: water
      icon: mdi:water
      filters:
        - throttle: 60s

  # System sensors
  - platform: uptime
    name: "${friendly_name} Uptime"
    entity_category: "diagnostic"
  - platform: wifi_signal
    name: "${friendly_name} Wi-Fi Signal"
    update_interval: 60s
    entity_category: "diagnostic"

  # Calculated sensors
  - platform: template
    name: "${friendly_name} Energy Consumed Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(energy_consumed_lux).has_state()) {
        double current = id(energy_consumed_lux).state * 1000.0;
        double midnight = id(energy_consumption_midnight);
        if (midnight == 0.0) { id(energy_consumption_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 200000) ? today / 1000.0 : 0.0;
      }
      return {};
  - platform: template
    name: "${friendly_name} Energy Produced Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(energy_produced_lux).has_state()) {
        double current = id(energy_produced_lux).state * 1000.0;
        double midnight = id(energy_production_midnight);
        if (midnight == 0.0) { id(energy_production_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 200000) ? today / 1000.0 : 0.0;
      }
      return {};
  - platform: template
    name: "${friendly_name} Water Consumed Today"
    unit_of_measurement: "m³"
    accuracy_decimals: 3
    device_class: water
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(water_consumed).has_state()) {
        double current = id(water_consumed).state;
        double midnight = id(water_consumption_midnight);
        if (midnight == 0.0) { id(water_consumption_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 1000) ? today : 0.0;
      }
      return {};
  - platform: template
    name: "${friendly_name} Gas Consumed Today"
    unit_of_measurement: "m³"
    accuracy_decimals: 3
    device_class: gas
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(gas_consumed).has_state()) {
        double current = id(gas_consumed).state;
        double midnight = id(gas_consumption_midnight);
        if (midnight == 0.0) { id(gas_consumption_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 1000) ? today : 0.0;
      }
      return {};
  - platform: template
    name: "${friendly_name} Power Excess Solar"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 10s
    lambda: |-
      if (id(power_produced).has_state() && id(power_consumed).has_state()) {
        double excess = (id(power_produced).state * 1000) - (id(power_consumed).state * 1000);
        return excess > 0 ? excess : 0.0;
      }
      return {};
  - platform: template
    name: "${friendly_name} Power Consumed 15min Mean"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 60s
    lambda: |-
      if (!id(buffer_full) && id(buffer_index) < 10) return {};
      float sum = 0.0;
      int count = id(buffer_full) ? 90 : id(buffer_index);
      for (int i = 0; i < count; i++) { sum += id(power_consumption_buffer)[i]; }
      return sum / count;
  - platform: template
    name: "${friendly_name} Power Consumed 15min Max"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 60s
    lambda: |-
      if (!id(buffer_full) && id(buffer_index) < 10) return {};
      float max_val = 0.0;
      int count = id(buffer_full) ? 90 : id(buffer_index);
      for (int i = 0; i < count; i++) { if (id(power_consumption_buffer)[i] > max_val) { max_val = id(power_consumption_buffer)[i]; } }
      return max_val;
  - platform: template
    name: "${friendly_name} Power Consumed 15min Min"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 60s
    lambda: |-
      if (!id(buffer_full) && id(buffer_index) < 10) return {};
      float min_val = 999999.0;
      int count = id(buffer_full) ? 90 : id(buffer_index);
      for (int i = 0; i < count; i++) { if (id(power_consumption_buffer)[i] < min_val) { min_val = id(power_consumption_buffer)[i]; } }
      return min_val < 999999.0 ? min_val : 0.0;
  - platform: template
    name: "${friendly_name} Energy Exceed 3kW Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_3kw_day_kwh);'
  - platform: template
    name: "${friendly_name} Energy Exceed 7kW Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_7kw_day_kwh);'
  - platform: template
    name: "${friendly_name} Energy Exceed 12kW Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_12kw_day_kwh);'
  - platform: template
    name: "${friendly_name} Energy Exceed 3kW Month"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_3kw_month_kwh);'
  - platform: template
    name: "${friendly_name} Energy Exceed 7kW Month"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_7kw_month_kwh);'
  - platform: template
    name: "${friendly_name} Energy Exceed 12kW Month"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_12kw_month_kwh);'
  - platform: template
    name: "${friendly_name} Cost Exceed 3kW Today"
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_3kw_day_kwh) * 0.1139;'
  - platform: template
    name: "${friendly_name} Cost Exceed 7kW Today"
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_7kw_day_kwh) * 0.1139;'
  - platform: template
    name: "${friendly_name} Cost Exceed 12kW Today"
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_12kw_day_kwh) * 0.1139;'
  - platform: template
    name: "${friendly_name} Cost Exceed 3kW Month"
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_3kw_month_kwh) * 0.1139;'
  - platform: template
    name: "${friendly_name} Cost Exceed 7kW Month"
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_7kw_month_kwh) * 0.1139;'
  - platform: template
    name: "${friendly_name} Cost Exceed 12kW Month"
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_12kw_month_kwh) * 0.1139;'

text_sensor:
  - platform: dsmr
    identification:
      name: "${friendly_name} DSMR ID"
      entity_category: "diagnostic"
    p1_version:
      name: "${friendly_name} DSMR Version"
      entity_category: "diagnostic"
    p1_version_be:
      name: "${friendly_name} DSMR Version BE"
      entity_category: "diagnostic"
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "${friendly_name} Wi-Fi SSID"
      entity_category: "diagnostic"
    mac_address:
      name: "${friendly_name} MAC Address"
      entity_category: "diagnostic"
  - platform: version
    name: "${friendly_name} ESPHome Version"
    hide_timestamp: true
    entity_category: "diagnostic"
  - platform: template
    name: "${friendly_name} Last Update"
    update_interval: 10s
    entity_category: "diagnostic"
    lambda: 'return id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S");'
  - platform: template
    name: "${friendly_name} Secondary Meter Type"
    icon: "mdi:gas-cylinder-outline"
    entity_category: "diagnostic"
    update_interval: 60s
    lambda: |-
      if (id(gas_consumed).has_state()) { return {"Gas"}; }
      if (id(water_consumed).has_state()) { return {"Water"}; }
      return {"None"};

interval:
  - interval: 10s
    then:
      - lambda: |-
          if (id(power_consumed).has_state()) {
            float power = id(power_consumed).state * 1000.0;
            int idx = id(buffer_index);
            id(power_consumption_buffer)[idx] = power;
            double exceed_3kw = power > 3000 ? (power - 3000) * 10.0 / 3600.0 : 0.0;
            double exceed_7kw = power > 7000 ? (power - 7000) * 10.0 / 3600.0 : 0.0;
            double exceed_12kw = power > 12000 ? (power - 12000) * 10.0 / 3600.0 : 0.0;
            id(exceed_class_3kw_day_kwh) += exceed_3kw / 1000.0;
            id(exceed_class_7kw_day_kwh) += exceed_7kw / 1000.0;
            id(exceed_class_12kw_day_kwh) += exceed_12kw / 1000.0;
            idx++;
            if (idx >= 90) { idx = 0; id(buffer_full) = true; }
            id(buffer_index) = idx;
          }
  - interval: 60s
    then:
      - lambda: |-
          auto time = id(sntp_time).now();
          if (time.hour == 0 && time.minute == 0) {
            if (id(energy_consumed_lux).has_state()) { id(energy_consumption_midnight) = id(energy_consumed_lux).state * 1000.0; }
            if (id(energy_produced_lux).has_state()) { id(energy_production_midnight) = id(energy_produced_lux).state * 1000.0; }
            if (id(gas_consumed).has_state()) { id(gas_consumption_midnight) = id(gas_consumed).state; }
            if (id(water_consumed).has_state()) { id(water_consumption_midnight) = id(water_consumed).state; }
            id(exceed_class_3kw_month_kwh) += id(exceed_class_3kw_day_kwh);
            id(exceed_class_7kw_month_kwh) += id(exceed_class_7kw_day_kwh);
            id(exceed_class_12kw_month_kwh) += id(exceed_class_12kw_day_kwh);
            id(exceed_class_3kw_day_kwh) = 0.0;
            id(exceed_class_7kw_day_kwh) = 0.0;
            id(exceed_class_12kw_day_kwh) = 0.0;
          }
          if (time.day_of_month == 1 && time.hour == 0 && time.minute == 0) {
            id(exceed_class_3kw_month_kwh) = 0.0;
            id(exceed_class_7kw_month_kwh) = 0.0;
            id(exceed_class_12kw_month_kwh) = 0.0;
          }

switch:
  - platform: template
    name: "${friendly_name} Debug Mode"
    entity_category: "config"
    optimistic: true
  - platform: template
    name: "${friendly_name} Reset Daily Statistics"
    entity_category: "config"
    turn_on_action:
      - lambda: |-
          id(exceed_class_3kw_day_kwh) = 0.0;
          id(exceed_class_7kw_day_kwh) = 0.0;
          id(exceed_class_12kw_day_kwh) = 0.0;
          ESP_LOGI("main", "Daily statistics reset");
      - switch.turn_off: self
  - platform: template
    name: "${friendly_name} Reset Monthly Statistics"
    entity_category: "config"
    turn_on_action:
      - lambda: |-
          id(exceed_class_3kw_month_kwh) = 0.0;
          id(exceed_class_7kw_month_kwh) = 0.0;
          id(exceed_class_12kw_month_kwh) = 0.0;
          ESP_LOGI("main", "Monthly statistics reset");
      - switch.turn_off: self

button:
  - platform: template
    name: "${friendly_name} Clear Ring Buffers"
    entity_category: "config"
    on_press:
      - lambda: |-
          for (int i = 0; i < 90; i++) { id(power_consumption_buffer)[i] = 0.0; }
          id(buffer_index) = 0;
          id(buffer_full) = false;
          ESP_LOGI("main", "Ring buffer cleared");
  - platform: restart
    name: "${friendly_name} Restart Device"
    entity_category: "config"

# Disable mDNS for stability on ESP8266
mdns:
  disabled: true
