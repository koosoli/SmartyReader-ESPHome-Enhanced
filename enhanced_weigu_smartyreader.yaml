# ===================================================================
# WeiGu SmartyReader Enhanced - ESPHome Configuration (OPTIMIZED)
#
# HOW TO USE:
# 1. Create a new device in your ESPHome dashboard.
# 2. In the configuration file for your new device, verify the
#    'esphome', 'esp8266', 'logger', 'api', 'ota', and 'wifi'
#    sections are correct for your hardware and network.
# 3. Copy the entire content of THIS file.
# 4. Paste it at the END of your new device's configuration file.
# 5. Configure your 'secrets.yaml' file with the necessary
#    values (like dsmr_key).
# ===================================================================


substitutions:
  device_name: weigu_smartyreader
  friendly_name: "WeiGu SmartyReader"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp8266:
  board: d1_mini_pro # Or d1_mini depending on your board

# --- Core System Components ---
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

safe_mode:
  reboot_timeout: 10min

logger:
  baud_rate: 0 # CRITICAL: This frees up GPIO3 for the UART.

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret fallback_ap_password

captive_portal:

# --- Hardware & Time Configuration ---
uart:
    id: uart_bus
    rx_pin:
      number: 3 # GPIO3
      inverted: true
    baud_rate: 115200
    rx_buffer_size: 2048

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"
    servers:
      - "lu.pool.ntp.org"
      - "pool.ntp.org"

i2c:
  sda: D2
  scl: D1
  scan: true

# --- Device Logic & Features ---

globals:
  - id: has_key
    type: bool
    restore_value: yes
    initial_value: "false"
  - id: stored_decryption_key
    type: char[32]
    restore_value: yes
  - id: energy_consumption_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: water_consumption_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: energy_production_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: gas_consumption_midnight
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_3kw_day_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_7kw_day_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_12kw_day_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_3kw_month_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_7kw_month_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: exceed_class_12kw_month_kwh
    type: double
    restore_value: yes
    initial_value: "0.0"
  - id: buffer_index
    type: int
    initial_value: "0"
  - id: buffer_full
    type: bool
    initial_value: "false"
  - id: power_consumption_buffer
    type: float[90] 

dsmr:
  id: dsmr_instance
  decryption_key: !secret dsmr_key
  max_telegram_length: 1800
  gas_mbus_id: 1
  water_mbus_id: 2

sensor:
  - platform: dsmr
    energy_delivered_lux:
      name: "Energy Consumed Luxembourg"
      id: energy_consumed_lux
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_delivered_tariff1:
      name: "Energy Consumed Tariff 1"
      id: energy_consumed_t1
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_delivered_tariff2:
      name: "Energy Consumed Tariff 2"
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_returned_lux:
      name: "Energy Produced Luxembourg"
      id: energy_produced_lux
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_returned_tariff1:
      name: "Energy Produced Tariff 1"
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    energy_returned_tariff2:
      name: "Energy Produced Tariff 2"
      state_class: total_increasing
      device_class: energy
      filters:
        - throttle: 60s
    power_delivered:
      name: "Power Consumed"
      id: power_consumed
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned:
      name: "Power Produced"
      id: power_produced
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    electricity_failures:
      name: "Electricity Failures"
      icon: mdi:alert
      state_class: total_increasing
    electricity_long_failures:
      name: "Long Electricity Failures"
      icon: mdi:alert
      state_class: total_increasing
    voltage_l1:
      name: "Voltage Phase 1"
      device_class: voltage
      state_class: measurement
      filters:
        - throttle: 10s
    voltage_l2:
      name: "Voltage Phase 2"
      device_class: voltage
      state_class: measurement
      filters:
        - throttle: 10s
    voltage_l3:
      name: "Voltage Phase 3"
      device_class: voltage
      state_class: measurement
      filters:
        - throttle: 10s
    current_l1:
      name: "Current Phase 1"
      device_class: current
      state_class: measurement
      filters:
        - throttle: 10s
    current_l2:
      name: "Current Phase 2"
      device_class: current
      state_class: measurement
      filters:
        - throttle: 10s
    current_l3:
      name: "Current Phase 3"
      device_class: current
      state_class: measurement
      filters:
        - throttle: 10s
    power_delivered_l1:
      name: "Power Consumed Phase 1"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_delivered_l2:
      name: "Power Consumed Phase 2"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_delivered_l3:
      name: "Power Consumed Phase 3"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned_l1:
      name: "Power Produced Phase 1"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned_l2:
      name: "Power Produced Phase 2"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    power_returned_l3:
      name: "Power Produced Phase 3"
      accuracy_decimals: 3
      device_class: power
      state_class: measurement
      filters:
        - throttle: 10s
    gas_delivered:
      name: "Gas Consumed"
      id: gas_consumed
      state_class: total_increasing
      device_class: gas
      filters:
        - throttle: 300s
    water_delivered:
      name: "Water Consumed"
      id: water_consumed
      state_class: total_increasing
      device_class: water
      icon: mdi:water
      filters:
        - throttle: 60s
        
# Only use if you have a BME280 on the ESP

#  - platform: bme280_i2c
#    temperature:
#      name: "BME280 Temperature"
#      id: bme280_temp
#      oversampling: 16x
#      device_class: temperature
#      state_class: measurement
#    pressure:
#      name: "BME280 Pressure"
#      id: bme280_pressure
#      device_class: atmospheric_pressure
#      state_class: measurement
#    humidity:
#      name: "BME280 Humidity"
#      id: bme280_humidity
#      device_class: humidity
#      state_class: measurement
#    address: 0x76
#    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: wifi_signal
    name: "Wi-Fi Signal"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: template
    name: "Energy Consumed Today"
    id: energy_consumed_today
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(energy_consumed_lux).has_state()) {
        double current = id(energy_consumed_lux).state * 1000.0;
        double midnight = id(energy_consumption_midnight);
        if (midnight == 0.0) { id(energy_consumption_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 200000) ? today / 1000.0 : 0.0;
      }
      return {};

  - platform: template
    name: "Energy Produced Today"
    id: energy_produced_today
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(energy_produced_lux).has_state()) {
        double current = id(energy_produced_lux).state * 1000.0;
        double midnight = id(energy_production_midnight);
        if (midnight == 0.0) { id(energy_production_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 200000) ? today / 1000.0 : 0.0;
      }
      return {};

  - platform: template
    name: "Water Consumed Today"
    id: water_consumed_today
    unit_of_measurement: "mÂ³"
    accuracy_decimals: 3
    device_class: water
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(water_consumed).has_state()) {
        double current = id(water_consumed).state;
        double midnight = id(water_consumption_midnight);
        if (midnight == 0.0) { id(water_consumption_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 1000) ? today : 0.0;
      }
      return {};

  - platform: template
    name: "Gas Consumed Today"
    id: gas_consumed_today
    unit_of_measurement: "mÂ³"
    accuracy_decimals: 3
    device_class: gas
    state_class: total_increasing
    update_interval: 60s
    lambda: |-
      if (id(gas_consumed).has_state()) {
        double current = id(gas_consumed).state;
        double midnight = id(gas_consumption_midnight);
        if (midnight == 0.0) { id(gas_consumption_midnight) = current; return 0.0; }
        double today = current - midnight;
        return (today > 0 && today < 1000) ? today : 0.0;
      }
      return {};

  - platform: template
    name: "Power Excess Solar"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 10s
    lambda: |-
      if (id(power_produced).has_state() && id(power_consumed).has_state()) {
        double excess = (id(power_produced).state * 1000) - (id(power_consumed).state * 1000);
        return excess > 0 ? excess : 0.0;
      }
      return {};

  - platform: template
    name: "Power Consumed 15min Mean"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 60s
    lambda: |-
      if (!id(buffer_full) && id(buffer_index) < 10) return {};
      float sum = 0.0;
      int count = id(buffer_full) ? 90 : id(buffer_index);
      for (int i = 0; i < count; i++) { sum += id(power_consumption_buffer)[i]; }
      return sum / count;

  - platform: template
    name: "Power Consumed 15min Max"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 60s
    lambda: |-
      if (!id(buffer_full) && id(buffer_index) < 10) return {};
      float max_val = 0.0;
      int count = id(buffer_full) ? 90 : id(buffer_index);
      for (int i = 0; i < count; i++) { if (id(power_consumption_buffer)[i] > max_val) { max_val = id(power_consumption_buffer)[i]; } }
      return max_val;

  - platform: template
    name: "Power Consumed 15min Min"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    update_interval: 60s
    lambda: |-
      if (!id(buffer_full) && id(buffer_index) < 10) return {};
      float min_val = 999999.0;
      int count = id(buffer_full) ? 90 : id(buffer_index);
      for (int i = 0; i < count; i++) { if (id(power_consumption_buffer)[i] < min_val) { min_val = id(power_consumption_buffer)[i]; } }
      return min_val < 999999.0 ? min_val : 0.0;

  - platform: template
    name: "Energy Exceed 3kW Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_3kw_day_kwh);'

  - platform: template
    name: "Energy Exceed 7kW Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_7kw_day_kwh);'

  - platform: template
    name: "Energy Exceed 12kW Today"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_12kw_day_kwh);'

  - platform: template
    name: "Energy Exceed 3kW Month"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_3kw_month_kwh);'

  - platform: template
    name: "Energy Exceed 7kW Month"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_7kw_month_kwh);'

  - platform: template
    name: "Energy Exceed 12kW Month"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    device_class: energy
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_12kw_month_kwh);'

  - platform: template
    name: "Cost Exceed 3kW Today"
    unit_of_measurement: "â¬"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_3kw_day_kwh) * 0.1139;'

  - platform: template
    name: "Cost Exceed 7kW Today"
    unit_of_measurement: "â¬"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_7kw_day_kwh) * 0.1139;'

  - platform: template
    name: "Cost Exceed 12kW Today"
    unit_of_measurement: "â¬"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 60s
    lambda: 'return id(exceed_class_12kw_day_kwh) * 0.1139;'

  - platform: template
    name: "Cost Exceed 3kW Month"
    unit_of_measurement: "â¬"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_3kw_month_kwh) * 0.1139;'

  - platform: template
    name: "Cost Exceed 7kW Month"
    unit_of_measurement: "â¬"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_7kw_month_kwh) * 0.1139;'

  - platform: template
    name: "Cost Exceed 12kW Month"
    unit_of_measurement: "â¬"
    accuracy_decimals: 2
    device_class: monetary
    state_class: total_increasing
    update_interval: 300s
    lambda: 'return id(exceed_class_12kw_month_kwh) * 0.1139;'

text_sensor:
  - platform: dsmr
    identification:
      name: "DSMR Identification"
      entity_category: "diagnostic"
    p1_version:
      name: "DSMR Version"
      entity_category: "diagnostic"
    p1_version_be:
      name: "DSMR Version Belgium"
      entity_category: "diagnostic"
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "Wi-Fi SSID"
      entity_category: "diagnostic"
    bssid:
      name: "Wi-Fi BSSID"
      entity_category: "diagnostic"
    mac_address:
      name: "MAC Address"
      entity_category: "diagnostic"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    entity_category: "diagnostic"

  - platform: template
    name: "Last Update"
    update_interval: 10s
    entity_category: "diagnostic"
    lambda: 'return id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S");'

  - platform: template
    name: "Secondary Meter Type"
    icon: "mdi:gas-cylinder-outline"
    entity_category: "diagnostic"
    update_interval: 60s
    lambda: |-
      if (id(gas_consumed).has_state()) { return {"Gas"}; }
      if (id(water_consumed).has_state()) { return {"Water"}; }
      return {"None"};

interval:
  - interval: 10s
    then:
      - lambda: |-
          if (id(power_consumed).has_state()) {
            float power = id(power_consumed).state * 1000.0;
            int idx = id(buffer_index);
            id(power_consumption_buffer)[idx] = power;
            double exceed_3kw = power > 3000 ? (power - 3000) * 10.0 / 3600.0 : 0.0;
            double exceed_7kw = power > 7000 ? (power - 7000) * 10.0 / 3600.0 : 0.0;
            double exceed_12kw = power > 12000 ? (power - 12000) * 10.0 / 3600.0 : 0.0;
            id(exceed_class_3kw_day_kwh) += exceed_3kw / 1000.0;
            id(exceed_class_7kw_day_kwh) += exceed_7kw / 1000.0;
            id(exceed_class_12kw_day_kwh) += exceed_12kw / 1000.0;
            idx++;
            if (idx >= 90) {
              idx = 0;
              id(buffer_full) = true;
            }
            id(buffer_index) = idx;
          }

  - interval: 60s
    then:
      - lambda: |-
          auto time = id(sntp_time).now();
          if (time.hour == 0 && time.minute == 0) {
            if (id(energy_consumed_lux).has_state()) { id(energy_consumption_midnight) = id(energy_consumed_lux).state * 1000.0; }
            if (id(energy_produced_lux).has_state()) { id(energy_production_midnight) = id(energy_produced_lux).state * 1000.0; }
            if (id(gas_consumed).has_state()) { id(gas_consumption_midnight) = id(gas_consumed).state; }
            if (id(water_consumed).has_state()) { id(water_consumption_midnight) = id(water_consumed).state; }
            id(exceed_class_3kw_month_kwh) += id(exceed_class_3kw_day_kwh);
            id(exceed_class_7kw_month_kwh) += id(exceed_class_7kw_day_kwh);
            id(exceed_class_12kw_month_kwh) += id(exceed_class_12kw_day_kwh);
            id(exceed_class_3kw_day_kwh) = 0.0;
            id(exceed_class_7kw_day_kwh) = 0.0;
            id(exceed_class_12kw_day_kwh) = 0.0;
          }
          if (time.day_of_month == 1 && time.hour == 0 && time.minute == 0) {
            id(exceed_class_3kw_month_kwh) = 0.0;
            id(exceed_class_7kw_month_kwh) = 0.0;
            id(exceed_class_12kw_month_kwh) = 0.0;
          }

switch:
  - platform: template
    name: "Debug Mode"
    id: debug_mode
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "Reset Daily Statistics"
    id: reset_daily_stats
    entity_category: "config"
    turn_on_action:
      - lambda: |-
          id(exceed_class_3kw_day_kwh) = 0.0;
          id(exceed_class_7kw_day_kwh) = 0.0;
          id(exceed_class_12kw_day_kwh) = 0.0;
          ESP_LOGI("main", "Daily statistics reset");
      - switch.turn_off: reset_daily_stats
  - platform: template
    name: "Reset Monthly Statistics"
    id: reset_monthly_stats
    entity_category: "config"
    turn_on_action:
      - lambda: |-
          id(exceed_class_3kw_month_kwh) = 0.0;
          id(exceed_class_7kw_month_kwh) = 0.0;
          id(exceed_class_12kw_month_kwh) = 0.0;
          ESP_LOGI("main", "Monthly statistics reset");
      - switch.turn_off: reset_monthly_stats

button:
  - platform: template
    name: "Clear Ring Buffers"
    entity_category: "config"
    on_press:
      - lambda: |-
          for (int i = 0; i < 90; i++) { id(power_consumption_buffer)[i] = 0.0; }
          id(buffer_index) = 0;
          id(buffer_full) = false;
          ESP_LOGI("main", "Ring buffer cleared");
  - platform: restart
    name: "Restart Device"
    entity_category: "config"

mdns:
  disabled: true
